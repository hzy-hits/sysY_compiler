// lalrpop 里的约定
grammar;
use sysY::ast::{CompUnit, FuncDef, FuncType, Block, Stmt, Exp, UnaryExp, UnaryOp,Op, PrimaryExp};


// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {}, 
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = {
    <func_def: FuncDef> => CompUnit { func_def },
};

pub FuncDef: FuncDef = {
    <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => FuncDef {
        func_type,
        id,
        block,
    },
};

pub FuncType: FuncType = "int" => FuncType::Int;

pub Block: Block = {
    "{" <stmt: Stmt> "}" => Block { stmt },
};


pub Stmt: Stmt = {
    "return" <exp: Exp> ";" => Stmt::Return(exp),
};
pub Number: i32 = {
    <num: IntConst> => num,
};

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}


pub Exp: Exp = {
    LOrExp => <>,
};


// LOrExp      ::= LAndExp | LOrExp "||" LAndExp;
pub LOrExp:Exp={
    LandExp=><>,
    <lhs:LOrExp> "||" <rhs:LandExp> => Exp::Binary(Box::new(lhs), Op::Or, Box::new(rhs)),
}

pub LandExp:Exp={
    EqExp=><>,
    <lhs:LandExp> "&&" <rhs:EqExp> => Exp::Binary(Box::new(lhs), Op::And, Box::new(rhs)),
}

pub EqExp:Exp={
    RelExp=><>,
    <lhs:EqExp> "==" <rhs:RelExp> => Exp::Binary(Box::new(lhs), Op::Eq, Box::new(rhs)),
    <lhs:EqExp> "!=" <rhs:RelExp> => Exp::Binary(Box::new(lhs), Op::Ne, Box::new(rhs)),
}

pub RelExp:Exp={
    AddExp=><>,
    <lhs:RelExp> "<" <rhs:AddExp> => Exp::Binary(Box::new(lhs), Op::Lt, Box::new(rhs)),
    <lhs:RelExp> ">" <rhs:AddExp> => Exp::Binary(Box::new(lhs), Op::Gt, Box::new(rhs)),
    <lhs:RelExp> "<=" <rhs:AddExp> => Exp::Binary(Box::new(lhs), Op::Le, Box::new(rhs)),
    <lhs:RelExp> ">=" <rhs:AddExp> => Exp::Binary(Box::new(lhs), Op::Ge, Box::new(rhs)),
}

pub AddExp: Exp = {
    MulExp => <>,
    <lhs:AddExp> "+" <rhs:MulExp> => Exp::Binary(Box::new(lhs), Op::Add, Box::new(rhs)),
    <lhs:AddExp> "-" <rhs:MulExp> => Exp::Binary(Box::new(lhs), Op::Sub, Box::new(rhs)),
};

pub MulExp: Exp = {
    UnaryExp => Exp::UnaryExp(Box::new(<>)),
    <lhs:MulExp> "*" <rhs:UnaryExp> => Exp::Binary(Box::new(lhs), Op::Mul, Box::new(Exp::UnaryExp(Box::new(rhs)))),
    <lhs:MulExp> "/" <rhs:UnaryExp> => Exp::Binary(Box::new(lhs), Op::Div, Box::new(Exp::UnaryExp(Box::new(rhs)))),
    <lhs:MulExp> "%" <rhs:UnaryExp> => Exp::Binary(Box::new(lhs), Op::Mod, Box::new(Exp::UnaryExp(Box::new(rhs)))),
};

pub UnaryExp: UnaryExp = {
    PrimaryExp => UnaryExp::PrimaryExp(<>),
    <op:UnaryOp> <exp:UnaryExp> => UnaryExp::UnaryOp(op, Box::new(exp)), 
};

pub UnaryOp:UnaryOp={
    "+"=>UnaryOp::Plus,
    "-"=>UnaryOp::Minus,
    "!"=>UnaryOp::Not,
}

pub PrimaryExp: PrimaryExp = {
    Number => PrimaryExp::Number(<>),
    "(" <e:Exp> ")" => PrimaryExp::Exp(Box::new(e)), 
};





